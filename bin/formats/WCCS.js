// Generated by CoffeeScript 1.7.1
(function() {
  var ActionProcess, ChoiceProcess, ConstantProcess, LabeledProcess, NullProcess, ParallelProcess, Process, RenamingProcess, RestrictionProcess, io_invert, is_broadcast,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  this.WCCS = {};

  this.WCCS.Context = (function() {
    function Context() {
      this.initState = __bind(this.initState, this);
      this.nullProcess = new NullProcess(this);
      this.nextId = 0;
      this.processes = {};
      this.constantProcesses = {};
      this.initProcess = null;
    }

    Context.prototype.resolve = function() {
      var P, name, _ref, _results;
      _ref = this.processes;
      _results = [];
      for (name in _ref) {
        P = _ref[name];
        _results.push(P.resolve());
      }
      return _results;
    };

    Context.prototype.getExplicitStateNames = function() {
      var P, name, _ref, _results;
      _ref = this.processes;
      _results = [];
      for (name in _ref) {
        P = _ref[name];
        _results.push(name);
      }
      return _results;
    };

    Context.prototype.getStateByName = function(name) {
      return this.processes[name];
    };

    Context.prototype.setInitProcess = function(P) {
      return this.initProcess = P;
    };

    Context.prototype.initState = function() {
      return this.initProcess;
    };

    Context.prototype.defineProcess = function(name, P) {
      return this.processes[name] = P;
    };

    Context.prototype.getProcess = function(name) {
      return this.processes[name];
    };

    Context.prototype.getActionProcess = function(a, w, P) {
      var hash, tb, val;
      if (P._actionHash == null) {
        P._actionHash = {};
      }
      tb = P._actionHash;
      hash = "" + a + "-" + w;
      val = tb[hash];
      if (val == null) {
        tb[hash] = val = new ActionProcess(a, w, P, this);
      }
      return val;
    };

    Context.prototype.getParallelProcess = function(P, Q) {
      var ph, tmp, _name;
      if (P.id < Q.id) {
        tmp = P;
        P = Q;
        Q = tmp;
      }
      ph = P._parallelHash != null ? P._parallelHash : P._parallelHash = {};
      return ph[_name = Q.id] != null ? ph[_name] : ph[_name] = new ParallelProcess(P, Q, this);
    };

    Context.prototype.getChoiceProcess = function(P, Q) {
      var ch, tmp, _name;
      if (P.id < Q.id) {
        tmp = P;
        P = Q;
        Q = tmp;
      }
      ch = P._choiceHash != null ? P._choiceHash : P._choiceHash = {};
      return ch[_name = Q.id] != null ? ch[_name] : ch[_name] = new ChoiceProcess(P, Q, this);
    };

    Context.prototype.getLabeledProcess = function(prop, P) {
      var lh;
      lh = P._labelHash != null ? P._labelHash : P._labelHash = {};
      return lh[prop] != null ? lh[prop] : lh[prop] = new LabeledProcess(prop, P, this);
    };

    Context.prototype.getRestrictionProcess = function(actions, P, actions_filled) {
      var rh, _name;
      if (actions_filled == null) {
        actions_filled = null;
      }
      rh = P._restrictionHash != null ? P._restrictionHash : P._restrictionHash = {};
      return rh[_name = actions.join(",")] != null ? rh[_name] : rh[_name] = new RestrictionProcess(actions, P, this, actions_filled);
    };

    Context.prototype.getRenamingProcess = function(action_map, prop_map, P, action_map_filled, inv_prop_map) {
      var k, map, rh, v, _name;
      if (action_map_filled == null) {
        action_map_filled = null;
      }
      if (inv_prop_map == null) {
        inv_prop_map = null;
      }
      rh = P._renameHash != null ? P._renameHash : P._renameHash = {};
      map = (function() {
        var _results;
        _results = [];
        for (k in action_map) {
          v = action_map[k];
          _results.push(k + "->" + v);
        }
        return _results;
      })();
      map.push.apply(map, (function() {
        var _results;
        _results = [];
        for (k in prop_map) {
          v = prop_map[k];
          _results.push(k + "=>" + v);
        }
        return _results;
      })());
      return rh[_name = map.join(',')] != null ? rh[_name] : rh[_name] = new RenamingProcess(action_map, prop_map, P, this, action_map_filled, inv_prop_map);
    };

    Context.prototype.getNullProcess = function() {
      return this.nullProcess;
    };

    Context.prototype.getConstantProcess = function(name) {
      var _base;
      return (_base = this.constantProcesses)[name] != null ? _base[name] : _base[name] = new ConstantProcess(name, this);
    };

    Context.prototype.parallelWeights = function(w1, w2) {
      return Math.max(w1, w2);
    };

    return Context;

  })();

  Process = (function() {
    function Process() {}

    Process.prototype.stringify = function() {
      throw new Error("Must be implemented in subclass");
    };

    Process.prototype.next = function() {
      throw new Error("Must be implemented in subclass");
    };

    Process.prototype.props = function() {
      throw new Error("Must be implemented in subclass");
    };

    Process.prototype.hasProp = function() {
      throw new Error("Must be implemented in subclass");
    };

    Process.prototype.countProp = function() {
      throw new Error("Must be implemented in subclass");
    };

    Process.prototype.resolve = function() {
      throw new Error("Must be implemented in subclass");
    };

    Process.prototype.name = function() {
      return null;
    };

    Process.prototype.getThisState = function() {
      return this;
    };

    return Process;

  })();

  LabeledProcess = (function(_super) {
    __extends(LabeledProcess, _super);

    function LabeledProcess(prop, P, ctx) {
      this.prop = prop;
      this.P = P;
      this.ctx = ctx;
      this.id = this.ctx.nextId++;
    }

    LabeledProcess.prototype.stringify = function() {
      return "" + this.prop + ":" + (this.P.stringify());
    };

    LabeledProcess.prototype.next = function(cb) {
      return this.P.next(cb);
    };

    LabeledProcess.prototype.props = function() {
      var props;
      props = this.P.props();
      props.push(this.prop);
      return props;
    };

    LabeledProcess.prototype.hasProp = function(p) {
      return p === this.prop || this.P.hasProp(p);
    };

    LabeledProcess.prototype.countProp = function(p) {
      var c;
      c = this.P.countProp(p);
      if (p === this.prop) {
        c += 1;
      }
      return c;
    };

    LabeledProcess.prototype.resolve = function() {
      return this.P.resolve();
    };

    return LabeledProcess;

  })(Process);

  ActionProcess = (function(_super) {
    __extends(ActionProcess, _super);

    function ActionProcess(a, w, P, ctx) {
      this.a = a;
      this.w = w;
      this.P = P;
      this.ctx = ctx;
      this.id = this.ctx.nextId++;
    }

    ActionProcess.prototype.stringify = function() {
      return "<" + this.a + "," + this.w + ">." + (this.P.stringify());
    };

    ActionProcess.prototype.next = function(cb) {
      return cb(this.w, this.P, this.a);
    };

    ActionProcess.prototype.props = function() {
      return [];
    };

    ActionProcess.prototype.hasProp = function() {
      return false;
    };

    ActionProcess.prototype.countProp = function() {
      return 0;
    };

    ActionProcess.prototype.resolve = function() {
      return this.P.resolve();
    };

    return ActionProcess;

  })(Process);

  is_broadcast = function(a) {
    return a[a.length - 2] === '!' && a[a.length - 1] === '!';
  };

  io_invert = function(a) {
    if (a[a.length - 1] === '!') {
      return a.slice(0, a.length - 1);
    }
    return a + '!';
  };

  ParallelProcess = (function(_super) {
    __extends(ParallelProcess, _super);

    function ParallelProcess(P, Q, ctx) {
      this.P = P;
      this.Q = Q;
      this.ctx = ctx;
      this.id = this.ctx.nextId++;
    }

    ParallelProcess.prototype.stringify = function() {
      return "(" + (this.P.stringify()) + " | " + (this.Q.stringify()) + ")";
    };

    ParallelProcess.prototype.next = function(cb) {
      var Ps, i, nProc, _i, _ref;
      nProc = this.ctx.nullProcess;
      if (this.cached_next == null) {
        this.cached_next = [];
        Ps = [];
        this.P.next((function(_this) {
          return function(w, t, a) {
            if (t === nProc) {
              _this.cached_next.push(w, _this.Q, a);
            } else {
              _this.cached_next.push(w, _this.ctx.getParallelProcess(t, _this.Q), a);
            }
            return Ps.push(w, t, a);
          };
        })(this));
        this.Q.next((function(_this) {
          return function(w, t, a) {
            var i, m, p, _i, _ref, _results;
            if (t === nProc) {
              _this.cached_next.push(w, _this.P, a);
            } else {
              _this.cached_next.push(w, _this.ctx.getParallelProcess(t, _this.P), a);
            }
            m = io_invert(a);
            _results = [];
            for (i = _i = 0, _ref = Ps.length; _i < _ref; i = _i += 3) {
              if (Ps[i + 2] === m) {
                p = Ps[i + 1];
                if (t === nProc) {
                  p = p;
                } else if (p === nProc) {
                  p = t;
                } else {
                  p = _this.ctx.getParallelProcess(t, p);
                }
                _results.push(_this.cached_next.push(_this.ctx.parallelWeights(w, Ps[i]), p, 'tau'));
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          };
        })(this));
      }
      for (i = _i = 0, _ref = this.cached_next.length; _i < _ref; i = _i += 3) {
        cb(this.cached_next[i], this.cached_next[i + 1], this.cached_next[i + 2]);
      }
    };

    ParallelProcess.prototype.props = function() {
      return __slice.call(this.P.props()).concat(__slice.call(this.Q.props()));
    };

    ParallelProcess.prototype.hasProp = function(p) {
      return this.P.hasProp(p) || this.Q.hasProp(p);
    };

    ParallelProcess.prototype.countProp = function(p) {
      return this.P.countProp(p) + this.Q.countProp(p);
    };

    ParallelProcess.prototype.resolve = function() {
      this.P.resolve();
      return this.Q.resolve();
    };

    return ParallelProcess;

  })(Process);

  RestrictionProcess = (function(_super) {
    __extends(RestrictionProcess, _super);

    function RestrictionProcess(actions, P, ctx, actions_filled) {
      var a, _i, _len, _ref;
      this.actions = actions;
      this.P = P;
      this.ctx = ctx;
      this.actions_filled = actions_filled != null ? actions_filled : null;
      this.id = this.ctx.nextId++;
      if (this.actions_filled == null) {
        this.actions_filled = [];
        _ref = this.actions;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          a = _ref[_i];
          if (__indexOf.call(this.actions_filled, a) < 0) {
            this.actions_filled.push(a);
            this.actions_filled.push(a + '!');
          }
        }
      }
    }

    RestrictionProcess.prototype.stringify = function() {
      return "" + (this.P.stringify()) + "\\{" + (this.actions.join(', ')) + "}";
    };

    RestrictionProcess.prototype.next = function(cb) {
      var i, _i, _ref;
      if (this.cached_next == null) {
        this.cached_next = [];
        this.P.next((function(_this) {
          return function(w, t, a) {
            if (__indexOf.call(_this.actions_filled, a) < 0) {
              t = _this.ctx.getRestrictionProcess(_this.actions, t, _this.actions_filled);
              return _this.cached_next.push(w, t, a);
            }
          };
        })(this));
      }
      for (i = _i = 0, _ref = this.cached_next.length; _i < _ref; i = _i += 3) {
        cb(this.cached_next[i], this.cached_next[i + 1], this.cached_next[i + 2]);
      }
    };

    RestrictionProcess.prototype.props = function() {
      return this.P.props();
    };

    RestrictionProcess.prototype.hasProp = function(p) {
      return this.P.hasProp(p);
    };

    RestrictionProcess.prototype.countProp = function(p) {
      return this.P.countProp(p);
    };

    RestrictionProcess.prototype.resolve = function() {
      return this.P.resolve();
    };

    return RestrictionProcess;

  })(Process);

  ChoiceProcess = (function(_super) {
    __extends(ChoiceProcess, _super);

    function ChoiceProcess(P, Q, ctx) {
      this.P = P;
      this.Q = Q;
      this.ctx = ctx;
      this.id = this.ctx.nextId++;
    }

    ChoiceProcess.prototype.stringify = function() {
      return "(" + (this.P.stringify()) + " + " + (this.Q.stringify()) + ")";
    };

    ChoiceProcess.prototype.next = function(cb) {
      this.P.next(cb);
      this.Q.next(cb);
    };

    ChoiceProcess.prototype.props = function() {
      return __slice.call(this.P.props()).concat(__slice.call(this.Q.props()));
    };

    ChoiceProcess.prototype.hasProp = function(p) {
      return this.P.hasProp(p) || this.Q.hasProp(p);
    };

    ChoiceProcess.prototype.countProp = function(p) {
      return this.P.countProp(p) + this.Q.countProp(p);
    };

    ChoiceProcess.prototype.resolve = function() {
      this.P.resolve();
      return this.Q.resolve();
    };

    return ChoiceProcess;

  })(Process);

  NullProcess = (function(_super) {
    __extends(NullProcess, _super);

    function NullProcess(ctx) {
      this.ctx = ctx;
      this.id = this.ctx.nextId++;
    }

    NullProcess.prototype.stringify = function() {
      return '0';
    };

    NullProcess.prototype.next = function() {};

    NullProcess.prototype.props = function() {
      return [];
    };

    NullProcess.prototype.hasProp = function(p) {
      return false;
    };

    NullProcess.prototype.countProp = function() {
      return 0;
    };

    NullProcess.prototype.resolve = function() {};

    return NullProcess;

  })(Process);

  ConstantProcess = (function(_super) {
    __extends(ConstantProcess, _super);

    function ConstantProcess(_name, ctx) {
      this._name = _name;
      this.ctx = ctx;
      this.id = this.ctx.nextId++;
      this.P = null;
    }

    ConstantProcess.prototype.stringify = function() {
      return this._name;
    };

    ConstantProcess.prototype.next = function(cb) {
      return this.P.next(cb);
    };

    ConstantProcess.prototype.props = function() {
      return this.P.props();
    };

    ConstantProcess.prototype.hasProp = function(p) {
      return this.P.hasProp(p);
    };

    ConstantProcess.prototype.countProp = function(p) {
      return this.P.countProp(p);
    };

    ConstantProcess.prototype.resolve = function() {
      var err;
      this.P = this.ctx.getProcess(this._name);
      if (!(this.P != null)) {
        err = new Error("Process constant \"" + this._name + "\" isn't defined");
        err.name = "TypeError";
        err.line = this.line;
        err.column = this.column;
        throw err;
      }
    };

    ConstantProcess.prototype.name = function() {
      return this._name;
    };

    ConstantProcess.prototype.getThisState = function() {
      return this.P;
    };

    return ConstantProcess;

  })(Process);

  RenamingProcess = (function(_super) {
    __extends(RenamingProcess, _super);

    function RenamingProcess(act_map, prop_map, P, ctx, act_map_filled, inv_prop_map) {
      var k, v, _ref, _ref1;
      this.act_map = act_map;
      this.prop_map = prop_map;
      this.P = P;
      this.ctx = ctx;
      this.act_map_filled = act_map_filled != null ? act_map_filled : null;
      this.inv_prop_map = inv_prop_map != null ? inv_prop_map : null;
      this.id = this.ctx.nextId++;
      if (this.act_map_filled == null) {
        this.act_map_filled = {};
        _ref = this.act_map;
        for (k in _ref) {
          v = _ref[k];
          this.act_map_filled[k] = v;
          this.act_map_filled[k + '!'] = v + '!';
        }
      }
      if (this.inv_prop_map == null) {
        this.inv_prop_map = {};
        _ref1 = this.prop_map;
        for (k in _ref1) {
          v = _ref1[k];
          this.inv_prop_map[v] = k;
          this.inv_prop_map[k] = false;
        }
      }
    }

    RenamingProcess.prototype.stringify = function() {
      var k, map, v;
      map = (function() {
        var _ref, _results;
        _ref = this.act_map;
        _results = [];
        for (k in _ref) {
          v = _ref[k];
          _results.push(k + " -> " + v);
        }
        return _results;
      }).call(this);
      map.push.apply(map, (function() {
        var _ref, _results;
        _ref = this.prop_map;
        _results = [];
        for (k in _ref) {
          v = _ref[k];
          _results.push(k + " => " + v);
        }
        return _results;
      }).call(this));
      return "(" + (this.P.stringify()) + ") [" + (map.join(', ')) + "]";
    };

    RenamingProcess.prototype.next = function(cb) {
      var i, _i, _ref;
      if (this.cached_next == null) {
        this.cached_next = [];
        this.P.next((function(_this) {
          return function(w, t, a) {
            a = _this.act_map_filled[a] || a;
            t = _this.ctx.getRenamingProcess(_this.act_map, _this.prop_map, t, _this.act_map_filled, _this.inv_prop_map);
            return _this.cached_next.push(w, t, a);
          };
        })(this));
      }
      for (i = _i = 0, _ref = this.cached_next.length; _i < _ref; i = _i += 3) {
        cb(this.cached_next[i], this.cached_next[i + 1], this.cached_next[i + 2]);
      }
    };

    RenamingProcess.prototype.props = function() {
      var p, props, _i, _len, _ref;
      props = [];
      _ref = this.P.props();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        props.push = this.prop_map[p] || p;
      }
      return props;
    };

    RenamingProcess.prototype.hasProp = function(p) {
      var ip;
      ip = this.inv_prop_map[p];
      if (ip !== false) {
        return this.P.hasProp(ip || p);
      }
      return false;
    };

    RenamingProcess.prototype.countProp = function(p) {
      var ip;
      ip = this.inv_prop_map[p];
      if (ip !== false) {
        return this.P.countProp(ip || p);
      }
      return 0;
    };

    RenamingProcess.prototype.resolve = function() {
      return this.P.resolve();
    };

    return RenamingProcess;

  })(Process);

}).call(this);
