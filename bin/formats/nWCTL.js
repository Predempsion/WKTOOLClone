// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.nWCTL = {};

  this.nWCTL.Expression = (function() {
    function Expression() {}

    Expression.prototype.convert_to_xml = function() {};

    return Expression;

  })();

  this.nWCTL.Phi = (function(_super) {
    __extends(Phi, _super);

    function Phi(quantifier, psi) {
      this.quantifier = quantifier;
      this.psi = psi;
    }

    Phi.prototype.convert_to_xml = function() {
      var xml;
      xml = "<all-paths>\n";
      if (this.quantifier === "AF") {
        xml = xml + ("<finally>\n" + (this.psi.convert_to_xml()) + "</finally>\n");
      } else {
        xml = xml + ("<globally>\n" + (this.psi.convert_to_xml()) + "</globally>\n");
      }
      return xml = xml + "</all-paths>\n";
    };

    return Phi;

  })(this.nWCTL.Expression);

  this.nWCTL.Psi = (function(_super) {
    __extends(Psi, _super);

    function Psi(text, exp1, exp2) {
      this.text = text;
      this.exp1 = exp1;
      this.exp2 = exp2;
    }

    Psi.prototype.convert_to_xml = function() {
      var xml;
      xml = "<" + (this.text.convert_to_xml()) + ">\n";
      xml = xml + this.exp1.convert_to_xml() + this.exp2.convert_to_xml();
      return xml = xml + ("</" + (this.text.convert_to_xml()) + ">\n");
    };

    return Psi;

  })(this.nWCTL.Expression);

  this.nWCTL.Chi = (function(_super) {
    __extends(Chi, _super);

    function Chi(child, operator, param) {
      this.child = child;
      this.operator = operator;
      this.param = param;
    }

    Chi.prototype.convert_to_xml = function() {
      var lop, xml;
      xml = "";
      lop = "";
      if (this.operator === "+") {
        lop = "addition";
      } else if (this.operator === "*") {
        lop = "multiplication";
      }
      xml = "<" + lop + ">\n";
      xml = xml + this.child.convert_to_xml() + this.param.convert_to_xml();
      return xml = xml + ("</" + lop + ">\n");
    };

    return Chi;

  })(this.nWCTL.Expression);

  this.nWCTL.Constant = (function(_super) {
    __extends(Constant, _super);

    function Constant(const_c) {
      this.const_c = const_c;
    }

    Constant.prototype.convert_to_xml = function() {
      var xml;
      return xml = "<constant>\n" + this.const_c + "\n</constant>\n";
    };

    return Constant;

  })(this.nWCTL.Expression);

  this.nWCTL.Propersition = (function(_super) {
    __extends(Propersition, _super);

    function Propersition(prop) {
      this.prop = prop;
    }

    Propersition.prototype.convert_to_xml = function() {
      var xml;
      return xml = "<proposition>\n" + this.prop + "\n</proposition>\n";
    };

    return Propersition;

  })(this.nWCTL.Expression);

  this.nWCTL.Component = (function(_super) {
    __extends(Component, _super);

    function Component(component) {
      this.component = component;
    }

    Component.prototype.convert_to_xml = function() {
      var xml;
      return xml = "<component>\n" + this.component + "\n</component>\n";
    };

    return Component;

  })(this.nWCTL.Expression);

  this.nWCTL.Compare = (function(_super) {
    __extends(Compare, _super);

    function Compare(compare_o) {
      this.compare_o = compare_o;
    }

    Compare.prototype.convert_to_xml = function() {
      return "compare-" + this.compare_o;
    };

    return Compare;

  })(this.nWCTL.Expression);

}).call(this);
