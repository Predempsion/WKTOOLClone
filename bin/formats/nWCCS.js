// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.nWCCS = {};

  this.nWCCS.Context = (function() {
    function Context() {
      this.declarations = [];
    }

    Context.prototype.get_declaration = function(name) {
      var dec, _i, _len, _ref, _results;
      _ref = this.declarations;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dec = _ref[_i];
        if (dec.name === name) {
          _results.push(dec);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Context.prototype.reverse = function() {
      return this.declarations = this.declarations.reverse();
    };

    return Context;

  })();

  this.nWCCS.Declaration = (function() {
    function Declaration(name, statement) {
      this.name = name;
      this.statement = statement;
    }

    return Declaration;

  })();

  this.nWCCS.Statement = (function() {
    function Statement() {}

    Statement.prototype.convert_to_xml = function() {};

    return Statement;

  })();

  this.nWCCS.ActionProcess = (function(_super) {
    __extends(ActionProcess, _super);

    function ActionProcess(act, statement) {
      this.act = act;
      this.statement = statement;
    }

    ActionProcess.prototype.convert_to_xml = function() {
      var weight_str, xml;
      xml = "<action>\n";
      xml = xml + ("<action_id>" + this.act.name + "</action_id>\n");
      if (this.act.isControl) {
        xml = xml + "<type controle_attr=\"c\"/>\n";
      } else {
        xml = xml + "<type controle_attr=\"u\"/>\n";
      }
      weight_str = this.act.vector_to_xml();
      xml = xml + ("<weights>\n" + weight_str + "</weights>\n");
      xml = xml + this.statement.convert_to_xml();
      return xml = xml + "</action>\n";
    };

    return ActionProcess;

  })(this.nWCCS.Statement);

  this.nWCCS.LabelProcess = (function(_super) {
    __extends(LabelProcess, _super);

    function LabelProcess(lab, statement) {
      this.lab = lab;
      this.statement = statement;
    }

    LabelProcess.prototype.convert_to_xml = function() {
      var xml;
      xml = "<label id=\"" + this.lab + "\">\n";
      xml = xml + this.statement.convert_to_xml();
      return xml = xml + "</label>\n";
    };

    return LabelProcess;

  })(this.nWCCS.Statement);

  this.nWCCS.ChoiseProcess = (function(_super) {
    __extends(ChoiseProcess, _super);

    function ChoiseProcess(post, statement) {
      this.post = post;
      this.statement = statement;
    }

    ChoiseProcess.prototype.convert_to_xml = function() {
      var xml;
      xml = "<choise>\n<first>\n";
      xml = xml + this.post.convert_to_xml();
      xml = xml + "</first>\n<second>\n";
      xml = xml + this.statement.convert_to_xml();
      return xml = xml + "</second>\n</choise>\n";
    };

    return ChoiseProcess;

  })(this.nWCCS.Statement);

  this.nWCCS.ParProcess = (function(_super) {
    __extends(ParProcess, _super);

    function ParProcess(post, statement) {
      this.post = post;
      this.statement = statement;
    }

    ParProcess.prototype.convert_to_xml = function() {
      var xml;
      xml = "<parallel>\n<first>\n";
      xml = xml + this.post.convert_to_xml();
      xml = xml + "</first>\n<second>\n";
      xml = xml + this.statement.convert_to_xml();
      return xml = xml + "</second>\n</parallel>\n";
    };

    return ParProcess;

  })(this.nWCCS.Statement);

  this.nWCCS.RestrictProcess = (function(_super) {
    __extends(RestrictProcess, _super);

    function RestrictProcess(post, actions) {
      this.post = post;
      this.actions = actions;
    }

    RestrictProcess.prototype.convert_to_xml = function() {
      var act, xml, _i, _len, _ref;
      xml = "<restriction>\n";
      xml = xml + "<restricted_actions>\n";
      _ref = this.actions;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        act = _ref[_i];
        xml = xml + ("<restricted_action id=\"" + act + "\"/>\n");
      }
      xml = xml + "</restricted_actions>\n";
      xml = xml + this.post.convert_to_xml();
      return xml = xml + "</restriction>\n";
    };

    return RestrictProcess;

  })(this.nWCCS.Statement);

  this.nWCCS.RenameProcess = (function(_super) {
    __extends(RenameProcess, _super);

    function RenameProcess(post, labels) {
      this.post = post;
      this.labels = labels;
    }

    RenameProcess.prototype.convert_to_xml = function() {
      var lab, xml, _i, _len, _ref;
      xml = "<rename>\n";
      xml = xml + "<renames>\n";
      _ref = this.labels;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        lab = _ref[_i];
        xml = xml + ("<rename from=\"" + lab.source + "\" to=\"" + lab.target + "\"/>\n");
      }
      xml = xml + "</renames>\n";
      xml = xml + this.post.convert_to_xml();
      return xml = xml + "</rename>\n";
    };

    return RenameProcess;

  })(this.nWCCS.Statement);

  this.nWCCS.RenamedLabel = (function() {
    function RenamedLabel(source, target) {
      this.source = source;
      this.target = target;
    }

    return RenamedLabel;

  })();

  this.nWCCS.PostProcess = (function(_super) {
    __extends(PostProcess, _super);

    function PostProcess(type, statement) {
      this.type = type;
      this.statement = statement != null ? statement : null;
    }

    PostProcess.prototype.convert_to_xml = function() {
      var xml;
      xml = "";
      if (this.statement != null) {
        xml = xml + ("<postprocess type=\"" + this.type + "\">\n");
        xml = xml + this.statement.convert_to_xml();
        return xml = xml + "</postprocess>\n";
      } else {
        return xml = xml + ("<postprocess type=\"" + this.type + "\"/>\n");
      }
    };

    return PostProcess;

  })(this.nWCCS.Statement);

  this.nWCCS.Action = (function() {
    function Action(name, vector, isControl) {
      this.name = name;
      this.vector = vector;
      this.isControl = isControl;
    }

    Action.prototype.vector_to_xml = function() {
      var i, w, xml, _i, _len, _ref;
      xml = "";
      i = 1;
      _ref = this.vector;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        w = _ref[_i];
        xml = xml + ("<weight id=\"" + i + "\", value=\"" + w + "\"/>\n");
        i++;
      }
      return xml;
    };

    return Action;

  })();

}).call(this);
