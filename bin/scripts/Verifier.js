// Generated by CoffeeScript 1.7.1
(function() {
  var addProp, defaultProp, getEncoding, getEngine, killRowProcess, removeRow, saveCurrentRow, setEncoding, setEngine, startVerification, statuses, testParse, updateEditor, _currentRow, _dontSaveAtTheMoment, _editor, _refreshParserTimeout,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  if (this.Verifier == null) {
    this.Verifier = {};
  }

  _currentRow = null;

  statuses = {
    unknown: 'icon-question-sign',
    satisfied: 'icon-ok',
    unsatisfied: 'icon-remove',
    working: 'icon-refresh'
  };

  _editor = null;

  _refreshParserTimeout = null;

  Init(function() {
    var ddl_strategies, factory, name, strat, strats, _i, _len;
    _editor = CodeMirror(document.getElementById("edit-prop-formula"), {
      mode: "nWCTL",
      lineNumbers: false,
      tabSize: 2,
      lineWrapping: true
    });
    _editor.setValue("");
    $('#add-property').click(function() {
      return addProp().click();
    });
    $('#edit-prop-encoding > .btn').click(function() {
      setEncoding($(this).data('encoding'));
      return saveCurrentRow();
    });
    $('#edit-prop-engine > .btn').click(function() {
      setEngine($(this).data('engine'));
      return saveCurrentRow();
    });
    _editor.on('change', function() {
      if (_refreshParserTimeout != null) {
        clearTimeout(_refreshParserTimeout);
      }
      return _refreshParserTimeout = setTimeout(testParse, 500);
    });
    $('#property-error-close').click(function() {
      return $('#property-error').fadeOut();
    });
    ddl_strategies = $('#search-strategy');
    strats = ((function() {
      var _results;
      _results = [];
      for (name in Strategies) {
        factory = Strategies[name];
        _results.push(name);
      }
      return _results;
    })()).sort();
    for (_i = 0, _len = strats.length; _i < _len; _i++) {
      strat = strats[_i];
      ddl_strategies.append($('<option>').val(strat).text(strat));
    }
    return $('#stats-check-label').tooltip({
      trigger: 'hover',
      title: function() {
        if ($('#stats-check').prop('checked')) {
          return "Disable detailed runtime statistics, this may improve execution time";
        } else {
          return "Enable detailed runtime statistics, this may affect execution time";
        }
      }
    });
  });

  testParse = function() {
    var err, has_error, msgbox, name, value;
    _refreshParserTimeout = null;
    msgbox = $('#property-error');
    has_error = false;
    try {
      value = _editor.getValue();
      if ((value != null) && !/^[ \t\n\r]*$/.test(value)) {
        WCTLParser.parse(value);
      }
    } catch (_error) {
      err = _error;
      has_error = true;
      name = err.name || "Error";
      $('#property-error-name').html(name + ": ");
      $('#property-error-message').html(err.message);
      Utils.track('UI', 'property-parse-failed', name + ":" + err.message);
    }
    if (has_error) {
      return msgbox.fadeIn();
    } else {
      return msgbox.fadeOut();
    }
  };

  Verifier.populateStates = function(states) {
    var cur_state, dropdown, state, _i, _len, _ref;
    cur_state = $("#edit-prop-init-state").val();
    if (cur_state !== '' && (cur_state != null) && __indexOf.call(states, cur_state) < 0) {
      states.push(cur_state);
    }
    dropdown = $('#edit-prop-init-state');
    dropdown.empty();
    _ref = states.sort();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      state = _ref[_i];
      dropdown.append($('<option>').val(state).text(state));
    }
    return $("#edit-prop-init-state").val(cur_state);
  };

  defaultProp = function() {
    return {
      status: 'unknown',
      state: "",
      formula: "",
      engine: "Local",
      encoding: "MinMax",
      time: "-",
      stats: null,
      strategy: DefaultStrategy,
      expensive_stats: true
    };
  };

  addProp = function(prop) {
    var closeBtn, p, row;
    if (prop == null) {
      prop = defaultProp();
    }
    Utils.track('UI', 'add-property');
    row = $('<tr>');
    row.append($('<td>').append($('<div>').addClass(statuses[prop.status])));
    row.append($('<td>').html(prop.state));
    p = $('<td>').addClass("formula");
    if (Editor.mode() === 'nWCCS') {
      CodeMirror.runMode(prop.formula, 'nWCTL', p[0]);
    } else {
      CodeMirror.runMode(prop.formula, 'WCTL', p[0]);
    }
    row.append(p);
    row.append($('<td>').addClass("time").html(prop.time));
    closeBtn = $('<button title="Delete" class="close"> &times;</td>');
    closeBtn.click(function() {
      return removeRow(row);
    });
    row.append($('<td>').html(closeBtn));
    $('#properties > tbody').append(row);
    row.data('property', prop);
    row.click(function() {
      return updateEditor($(this));
    });
    return row;
  };

  removeRow = function(row) {
    var prop;
    prop = row.data('property');
    if (prop.worker != null) {
      killRowProcess(row);
    }
    $("#edit-form").show(0);
    $("#stats-view").hide(0);
    if ((_currentRow != null) && row.is(_currentRow)) {
      _currentRow = null;
    }
    return row.remove();
  };

  Init(function() {
    _editor.on('change', saveCurrentRow);
    return $('#edit-prop-init-state').change(saveCurrentRow);
  });

  _dontSaveAtTheMoment = false;

  saveCurrentRow = function() {
    var cells, changeStatus, prop;
    if (_dontSaveAtTheMoment) {
      return;
    }
    if (_currentRow == null) {
      _currentRow = addProp();
    }
    prop = _currentRow.data('property');
    changeStatus = true;
    if (prop.state === $("#edit-prop-init-state").val()) {
      if (prop.formula === _editor.getValue()) {
        if (prop.encoding === getEncoding()) {
          if (prop.engine === getEngine()) {
            if (prop.strategy === $('#search-strategy').val()) {
              changeStatus = false;
            }
          }
        }
      }
    }
    if (changeStatus) {
      prop.status = 'unknown';
      if (prop.worker != null) {
        killRowProcess(_currentRow);
      }
    }
    prop.state = $("#edit-prop-init-state").val();
    prop.formula = _editor.getValue();
    prop.encoding = getEncoding();
    prop.engine = getEngine();
    prop.expensive_stats = $('#stats-check').prop('checked');
    prop.strategy = $('#search-strategy').val();
    cells = _currentRow.children("td");
    cells.eq(0).find("div").removeClass().addClass(statuses[prop.status]);
    cells.eq(1).html(prop.state);
    cells.eq(2).empty();
    if (Editor.mode() === 'nWCCS') {
      return CodeMirror.runMode(prop.formula, 'nWCTL', cells.eq(2)[0]);
    } else {
      return CodeMirror.runMode(prop.formula, 'WCTL', cells.eq(2)[0]);
    }
  };

  updateEditor = function(row) {
    var k, key, options, parent, prop, tbody, td, th, title, v, val, value, _ref, _ref1;
    if (_currentRow != null) {
      saveCurrentRow();
    }
    $('#properties > tbody > tr').removeClass();
    _currentRow = row;
    _currentRow.addClass('well');
    prop = _currentRow.data('property');
    if (prop.status === 'working' || (prop.stats != null)) {
      $("#edit-form").hide(0);
      $("#stats-view").show(0);
    } else {
      $("#edit-form").show(0);
      $("#stats-view").hide(0);
    }
    if (prop.stats != null) {
      if (prop.stats.result) {
        title = 'Formula is Satisfiable';
      } else {
        title = 'Formula is Unsatisfiable';
      }
      $('#stats-view h3').html(title);
      tbody = $('#stats-view tbody');
      parent = tbody.parent();
      tbody.detach();
      tbody.empty();
      _ref = prop.stats;
      for (key in _ref) {
        value = _ref[key];
        if (!(key !== 'result' && key !== 'Time' && key !== 'TimeAsInt')) {
          continue;
        }
        val = value;
        if (typeof value === 'object') {
          val = value.value;
        }
        th = $('<th>').html(key);
        td = $('<td>');
        tbody.append($('<tr>').append(th).append(td));
        if (value.sparklines != null) {
          options = {
            width: '150px',
            height: '22px'
          };
          if (value.options != null) {
            _ref1 = value.options;
            for (k in _ref1) {
              v = _ref1[k];
              options[k] = v;
            }
          }
          td.append($('<div>').addClass('sparkline').sparkline(value.sparklines, options));
          td.append(" ");
        }
        if (val != null) {
          td.append(val);
        }
      }
      parent.append(tbody);
      $('#kill-process').addClass('hidden');
      $('#edit-prop').removeClass('hidden');
    } else if (prop.status === 'working') {
      $('#stats-view h3').html("Verification in Progress...");
      $('#stats-view tbody').empty();
      $('#kill-process').removeClass('hidden');
      $('#edit-prop').addClass('hidden');
    }
    _dontSaveAtTheMoment = true;
    $('#stats-check').prop('checked', prop.expensive_stats);
    $("#edit-prop-init-state").val(prop.state);
    $('#search-strategy').val(prop.strategy);
    _editor.setValue(prop.formula);
    setEncoding(prop.encoding);
    setEngine(prop.engine);
    _dontSaveAtTheMoment = false;
    return $.sparkline_display_visible();
  };

  Init(function() {
    return $('#edit-prop').click(function() {
      var prop;
      if (_currentRow != null) {
        prop = _currentRow.data('property');
        prop.stats = null;
        return updateEditor(_currentRow);
      }
    });
  });

  Verifier.load = function(props) {
    var defaults, k, last, prop, v, _i, _len;
    if (props == null) {
      props = [];
    }
    $('#properties > tbody').each(function() {
      return $(this).tooltip('destroy');
    });
    $('#properties > tbody').empty();
    _currentRow = null;
    last = null;
    defaults = defaultProp();
    for (_i = 0, _len = props.length; _i < _len; _i++) {
      prop = props[_i];
      for (k in defaults) {
        v = defaults[k];
        if (prop[k] == null) {
          prop[k] = v;
        }
      }
      last = addProp(prop);
    }
    return last != null ? last.click() : void 0;
  };

  Verifier.save = function() {
    var k, keys, props, v;
    saveCurrentRow();
    keys = (function() {
      var _ref, _results;
      _ref = defaultProp();
      _results = [];
      for (k in _ref) {
        v = _ref[k];
        if (k !== 'status') {
          _results.push(k);
        }
      }
      return _results;
    })();
    props = [];
    $('#properties > tbody tr').each(function() {
      var p, prop, _i, _len;
      prop = $(this).data('property');
      p = {};
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        k = keys[_i];
        p[k] = prop[k];
      }
      if (prop.status === 'working') {
        p.status = 'unknown';
      } else {
        p.status = prop.status;
      }
      return props.push(p);
    });
    return props;
  };

  Verifier.GetnWCTLxml = function() {
    var e, nwctlprop, prop, props, xml, _i, _len;
    props = Verifier.save();
    xml = "<quereis>\n";
    for (_i = 0, _len = props.length; _i < _len; _i++) {
      prop = props[_i];
      try {
        nwctlprop = nWCTLParser.parse(prop.formula);
        xml = xml + ("<query>\n" + (nwctlprop.convert_to_xml()) + "</query>\n");
      } catch (_error) {
        e = _error;
        alert("Failed to parse the query: " + prop.formula);
        alert(e);
      }
    }
    return xml + "</quereis>\n";
  };

  setEncoding = function(encoding) {
    $('#edit-prop-encoding > .btn').removeClass('disabled');
    return $('#edit-prop-encoding > .btn').each(function() {
      if ($(this).data('encoding') === encoding) {
        return $(this).addClass('disabled');
      }
    });
  };

  getEncoding = function() {
    return $('#edit-prop-encoding > .btn.disabled').data('encoding');
  };

  setEngine = function(engine) {
    $('#edit-prop-engine > .btn').removeClass('disabled');
    $('#edit-prop-engine > .btn').each(function() {
      if ($(this).data('engine') === engine) {
        return $(this).addClass('disabled');
      }
    });
    if (engine === 'Local') {
      return $('#search-strategy').fadeIn(200);
    } else {
      return $('#search-strategy').fadeOut(200);
    }
  };

  getEngine = function() {
    return $('#edit-prop-engine > .btn.disabled').data('engine');
  };

  Init(function() {
    $('#edit-prop-run').click(startVerification);
    return $('#kill-process').click(function() {
      var prop;
      prop = _currentRow.data('property');
      prop.status = 'unknown';
      killRowProcess(_currentRow);
      return updateEditor(_currentRow);
    });
  });

  killRowProcess = function(row) {
    var prop;
    prop = row.data('property');
    if (prop.update_interval != null) {
      clearInterval(prop.update_interval);
      prop.update_interval = null;
    }
    if (prop.worker != null) {
      prop.worker.terminate();
      prop.worker = null;
      ShowMessage("Verification of property \"" + prop.formula + "\" terminated.");
      return Utils.track('verify', 'killed');
    }
  };

  startVerification = function() {
    var prop, row, start, strategy, updateTime;
    saveCurrentRow();
    row = _currentRow;
    prop = row.data('property');
    prop.status = 'working';
    prop.worker = new Worker('scripts/VerificationWorker.js');
    start = new Date().getTime();
    updateTime = function() {
      var elapsed, formatted;
      elapsed = (new Date()).getTime() - start;
      formatted = elapsed + " ms";
      row.find('.time').html(formatted);
      return formatted;
    };
    prop.update_interval = setInterval(updateTime, 150);
    prop.worker.onmessage = function(e) {
      prop = row.data('property');
      clearInterval(prop.update_interval);
      prop.time = updateTime();
      prop.update_interval = null;
      prop.worker.terminate();
      prop.worker = null;
      if (e.data.result) {
        prop.status = 'satisfied';
      } else {
        prop.status = 'unsatisfied';
      }
      Utils.track('verify', 'finished', prop.status, e.data.TimeAsInt);
      prop.stats = e.data;
      prop.time = e.data.Time;
      row.find('.time').html(prop.time);
      row.children("td").eq(0).find("div").removeClass().addClass(statuses[prop.status]);
      if ((_currentRow != null) && row.is(_currentRow)) {
        return updateEditor(row);
      }
    };
    prop.worker.onerror = function(error) {
      prop = row.data('property');
      clearInterval(prop.update_interval);
      prop.time = updateTime();
      Utils.track('verify', 'failed-error', error, prop.time);
      prop.update_interval = null;
      prop.status = 'unknown';
      prop.worker.terminate();
      prop.worker = null;
      row.children("td").eq(0).find("div").removeClass().addClass(statuses[prop.status]);
      if ((_currentRow != null) && row.is(_currentRow)) {
        updateEditor(row);
      }
      return ShowMessage(error.message);
    };
    strategy = null;
    if (prop.engine === 'Local') {
      strategy = prop.strategy;
      Utils.track('verify', 'with-strategy', strategy);
    }
    prop.worker.postMessage({
      mode: Editor.mode(),
      model: Editor.model(),
      state: prop.state,
      property: prop.formula,
      engine: prop.engine,
      encoding: prop.encoding,
      strategy: strategy,
      expensive_stats: prop.expensive_stats
    });
    Utils.track('verify', 'with-engine', prop.engine);
    Utils.track('verify', 'with-encoding', prop.encoding);
    Utils.track('verify', 'in-mode', Editor.mode());
    Utils.track('verify-with', prop.encoding, prop.engine);
    return updateEditor(_currentRow);
  };

}).call(this);
