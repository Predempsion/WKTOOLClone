// Generated by CoffeeScript 1.7.1
(function() {
  var addToGraph, canvasMouseDown, canvasMouseMove, expandToGraph, loadModel, parseModel, renderGraph, renderModel, selectNode, windowMouseUp, _arrowlength, _arrowwidth, _canvas, _ctx, _dragging, _edgedistance, _expandInitially, _graph, _highlightEdge, _inits, _mode, _radius, _selectedNode, _selfloop;

  _inits = [];

  this.Init = function(c) {
    return _inits.push(c);
  };

  $(function() {
    var c, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = _inits.length; _i < _len; _i++) {
      c = _inits[_i];
      _results.push(c());
    }
    return _results;
  });

  window.onmessage = function(e) {
    if (e.origin !== Utils.origin()) {
      return;
    }
    if (e.data.type === 'visualize-model-message') {
      if (typeof e.data.mode === 'string' && typeof e.data.model === 'string') {
        return parseModel(e.data.model, e.data.mode);
      }
    }
  };

  Init(function() {
    window.parent.postMessage({
      type: 'request-model-message'
    }, Utils.origin());
    return $('.close-button').click(function() {
      return window.parent.postMessage({
        type: 'close-visualization-message'
      }, Utils.origin());
    });
  });

  _mode = null;

  parseModel = function(model, mode) {
    var err, wks;
    try {
      wks = window["" + mode + "Parser"].parse(model);
      if (!(wks instanceof Array)) {
        wks.resolve();
      } else {
        wks = null;
      }
    } catch (_error) {
      err = _error;
      wks = null;
    }
    if (wks == null) {
      window.parent.postMessage({
        type: 'visualization-errr-message',
        message: "Failed to parse model!"
      }, Utils.origin());
    }
    _mode = mode;
    return loadModel(wks);
  };

  _expandInitially = false;

  loadModel = function(wks) {
    var name, _i, _len, _ref;
    _ref = wks.getExplicitStateNames();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      $('#initial-state').append($('<option>').html(name).val(name));
    }
    $('#expand-all').prop('checked', false);
    $('#expand-all').click(function() {
      return $('#expand-all-warning').fadeToggle();
    });
    return $('#render-button').removeClass('disabled').click(function() {
      var state, statename;
      statename = $('#initial-state').val();
      state = wks.getStateByName(statename);
      if (state != null) {
        _expandInitially = $('#expand-all').prop('checked');
        return renderModel(wks, state, statename);
      } else {
        return window.parent.postMessage({
          type: 'visualization-errr-message',
          message: "\"" + statename + "\" is not a valid state"
        }, Utils.origin());
      }
    });
  };

  _graph = null;

  _canvas = null;

  _ctx = null;

  _selectedNode = null;

  _highlightEdge = null;

  renderModel = function(wks, state, statename) {
    var setGraphSize;
    this._graph = _graph = arbor.ParticleSystem({
      repulsion: 1000,
      stiffness: 600,
      friction: 0.5,
      gravity: false,
      fps: 30,
      dt: 0.02,
      precision: 0.6
    });
    _canvas = $("canvas");
    _ctx = _canvas[0].getContext("2d");
    _graph.renderer = {
      init: function() {},
      redraw: renderGraph
    };
    _graph.screenPadding(80);
    selectNode(addToGraph(state, statename));
    $("#initial-state-form").remove();
    $("#statename").text(statename);
    $("#visualization").show();
    _canvas.mousedown(canvasMouseDown);
    _canvas.bind('mousemove', canvasMouseMove);
    $(window).resize(function() {
      return $('#splitter').height($(window).height() - $('#render-title').height());
    });
    $(window).resize();
    setGraphSize = function() {
      var h, w;
      w = $(".ui-layout-center").width();
      h = $(".ui-layout-center").height() - 20;
      _graph.screenSize(w, h);
      _canvas.prop('width', w);
      _canvas.prop('height', h);
      return renderGraph();
    };
    $('#splitter').layout({
      applyDefaultStyles: false,
      onresize: setGraphSize,
      maxSize: "80%",
      fxSpeed: "slow"
    });
    $(window).resize();
    return setGraphSize();
  };

  addToGraph = function(state, name) {
    if (name == null) {
      name = state.name();
    }
    state = state.getThisState();
    if (name != null) {
      if (name.length > 10) {
        name = name.slice(0, 9) + "..";
      }
    }
    return state._visualNode != null ? state._visualNode : state._visualNode = _graph.addNode(state.id, {
      state: state,
      name: name,
      w: 10,
      expanded: false
    });
  };

  expandToGraph = function(state) {
    var n1;
    n1 = addToGraph(state);
    if (n1.data.expanded) {
      return;
    }
    n1.data.expanded = true;
    state.next(function(weight, target, action) {
      var e, edge, n2, oppo, same, _i, _len;
      if (action == null) {
        action = null;
      }
      n2 = addToGraph(target);
      edge = _graph.addEdge(n1, n2, {
        bend: 0
      });
      if (edge != null) {
        same = _graph.getEdges(n1, n2);
        oppo = _graph.getEdges(n2, n1);
        if (n1 !== n2) {
          edge.data.bend = same.length;
          if (oppo.length === 0) {
            edge.data.bend -= 1;
          }
          if (same.length === 1 && oppo.length > 0) {
            for (_i = 0, _len = oppo.length; _i < _len; _i++) {
              e = oppo[_i];
              e.data.bend += 1;
            }
          }
        }
      }
      if (_expandInitially) {
        return expandToGraph(target);
      }
    });
    if (!_expandInitially) {
      Utils.track('visualize', 'expand-state');
    }
  };

  _edgedistance = 1;

  _radius = 8;

  _arrowlength = 10;

  _arrowwidth = 5;

  _selfloop = 50;

  renderGraph = function() {
    _ctx.fillStyle = "white";
    _ctx.fillRect(0, 0, _canvas.prop('width'), _canvas.prop('height'));
    _ctx.strokeStyle = "#bbb";
    _ctx.fillStyle = "#bbb";
    _ctx.lineWidth = 1;
    _graph.eachEdge(function(edge, p1, p2) {
      var al, ap, cp, factor, fx, fy, line, norm, selfloop, unit;
      line = p2.subtract(p1);
      unit = line.normalize();
      selfloop = unit.exploded();
      if (selfloop) {
        p2 = p2.subtract(arbor.Point(_selfloop, _selfloop));
        line = p2.subtract(p1);
        unit = line.normalize();
      }
      if (edge.source.data.name != null) {
        fx = Math.abs((edge.source.data.w / 2) / unit.x);
        fy = Math.abs(10 / unit.y);
        factor = Math.min(fx, fy);
        p1 = p1.add(unit.multiply(factor + _edgedistance));
      } else {
        p1 = p1.add(unit.multiply(_radius + _edgedistance));
      }
      if (!selfloop) {
        if (edge.target.data.name != null) {
          fx = Math.abs((edge.target.data.w / 2) / unit.x);
          fy = Math.abs(10 / unit.y);
          factor = Math.min(fx, fy);
          p2 = p2.subtract(unit.multiply(factor + _edgedistance));
        } else {
          p2 = p2.subtract(unit.multiply(_radius + _edgedistance));
        }
      }
      if (edge === _highlightEdge) {
        _ctx.strokeStyle = "#888";
        _ctx.fillStyle = "#888";
        _ctx.lineWidth = 2;
      }
      line = p2.subtract(p1);
      norm = line.normal();
      cp = p1.add(line.divide(2));
      _ctx.beginPath();
      _ctx.moveTo(p1.x, p1.y);
      if (selfloop) {
        p1.x += 10;
        _ctx.moveTo(p1.x - 10, p1.y);
        cp = p1.add(arbor.Point(_selfloop, -_selfloop));
        _ctx.bezierCurveTo(p1.x - _selfloop, p1.y - _selfloop, cp.x, cp.y, p1.x, p1.y);
        p2 = p1;
      } else if (edge.data.bend > 0) {
        cp = cp.add(norm.multiply(edge.data.bend / 4));
        _ctx.quadraticCurveTo(cp.x, cp.y, p2.x, p2.y);
      } else {
        _ctx.lineTo(p2.x, p2.y);
      }
      _ctx.stroke();
      _ctx.beginPath();
      _ctx.moveTo(p2.x, p2.y);
      unit = (p2.subtract(cp)).normalize();
      al = p2.subtract(unit.multiply(_arrowlength));
      ap = al.add(unit.normal().multiply(_arrowwidth));
      _ctx.lineTo(ap.x, ap.y);
      ap = al.add(unit.normal().multiply(-_arrowwidth));
      _ctx.lineTo(ap.x, ap.y);
      _ctx.lineTo(p2.x, p2.y);
      _ctx.fill();
      if (edge === _highlightEdge) {
        _ctx.strokeStyle = "#bbb";
        _ctx.fillStyle = "#bbb";
        return _ctx.lineWidth = 1;
      }
    });
    _ctx.fillStyle = "#bbb";
    _ctx.font = "12px 'Open Sans'";
    _ctx.textAlign = "center";
    return _graph.eachNode(function(node, p) {
      var h, name, w;
      name = node.data.name;
      if (name != null) {
        w = 10;
        h = 20;
        w = _ctx.measureText(name).width + 10;
        if (node === _selectedNode) {
          _ctx.fillStyle = "#888";
        }
        _ctx.roundRect(p.x - w / 2, p.y - h / 2, w, h, 4);
        _ctx.fill();
        _ctx.fillStyle = "white";
        _ctx.fillText(name, p.x, p.y + 4);
        _ctx.fillStyle = "#bbb";
        return node.data.w = w;
      } else {
        _ctx.beginPath();
        _ctx.arc(p.x, p.y, _radius, 0, 2 * Math.PI, false);
        _ctx.closePath();
        if (node === _selectedNode) {
          _ctx.fillStyle = "#888";
          _ctx.fill();
          _ctx.fillStyle = "#bbb";
        } else if (!node.data.expanded) {
          _ctx.fillStyle = "#32CD32";
          _ctx.fill();
          _ctx.fillStyle = "#bbb";
        } else {
          _ctx.fill();
        }
        return node.data.w = _radius * 2;
      }
    });
  };

  _dragging = false;

  canvasMouseDown = function(e) {
    var mp, pos, res;
    pos = _canvas.offset();
    mp = arbor.Point(e.pageX - pos.left, e.pageY - pos.top);
    res = _graph.nearest(mp);
    if ((res != null) && res.distance < res.node.data.w / 2 + 5) {
      selectNode(res.node);
      _selectedNode.fixed = true;
      $(window).bind('mouseup', windowMouseUp);
      _dragging = true;
      Utils.track('visualize', 'graph-node-clicked');
    }
    return e.originalEvent.preventDefault();
  };

  canvasMouseMove = function(e) {
    var mp, pos, res;
    pos = _canvas.offset();
    mp = arbor.Point(e.pageX - pos.left, e.pageY - pos.top);
    if (_dragging) {
      _selectedNode.p = _graph.fromScreen(mp);
      return _canvas.css('cursor', 'move');
    } else {
      res = _graph.nearest(mp);
      if ((res != null) && res.distance < res.node.data.w / 2 + 5) {
        return _canvas.css('cursor', 'pointer');
      } else {
        return _canvas.css('cursor', 'default');
      }
    }
  };

  windowMouseUp = function(e) {
    _dragging = false;
    _selectedNode.fixed = false;
    _selectedNode.tempMass = 1000;
    return $(window).unbind('mouseup', windowMouseUp);
  };

  selectNode = function(node) {
    var parent, state, targets;
    if (node === _selectedNode) {
      return;
    }
    _selectedNode = node;
    state = _selectedNode.data.state;
    expandToGraph(state);
    CodeMirror.runMode(state.stringify(), _mode, $('#current-state')[0]);
    $('#current-props').text(state.props().join(', '));
    targets = $('#targets');
    parent = targets.parent();
    targets.detach();
    targets.empty();
    state.next(function(weight, target, action) {
      var myEdge, td, tr;
      if (action == null) {
        action = null;
      }
      tr = $('<tr>');
      tr.append($('<td>').addClass("weight").text(weight));
      tr.append($('<td>').addClass("action").text(action));
      td = $('<td>').addClass("state");
      CodeMirror.runMode(target.stringify(), _mode, td[0]);
      tr.append(td);
      targets.append(tr);
      tr.click(function() {
        _highlightEdge = null;
        selectNode(addToGraph(target));
        return Utils.track('visualize', 'target-clicked-in-target-list');
      });
      myEdge = null;
      tr.mouseenter(function() {
        var edges;
        if (myEdge == null) {
          edges = _graph.getEdges(addToGraph(state), addToGraph(target));
          if (edges.length > 0) {
            myEdge = edges[0];
          }
        }
        _highlightEdge = myEdge;
        return renderGraph();
      });
      return tr.mouseleave(function() {
        if (myEdge === _highlightEdge) {
          _highlightEdge = null;
          return renderGraph();
        }
      });
    });
    parent.append(targets);
    return renderGraph();
  };

  CanvasRenderingContext2D.prototype.roundRect = function(x, y, w, h, r) {
    if (w < 2 * r) {
      r = w / 2;
    }
    if (h < 2 * r) {
      r = h / 2;
    }
    this.beginPath();
    if (r < 1) {
      this.rect(x, y, w, h);
    } else {
      this.moveTo(x + r, y);
      this.arcTo(x + w, y, x + w, y + h, r);
      this.arcTo(x + w, y + h, x, y + h, r);
      this.arcTo(x, y + h, x, y, r);
      this.arcTo(x, y, x + w, y, r);
    }
    this.closePath();
  };

  if (window.opera != null) {
    CanvasRenderingContext2D.prototype.roundRect = function(x, y, w, h, r) {
      if (w < 2 * r) {
        r = w / 2;
      }
      if (h < 2 * r) {
        r = h / 2;
      }
      this.beginPath();
      if (r < 1) {
        this.rect(x, y, w, h);
      } else {
        this.moveTo(x + r, y);
        this.arcTo(x + r, y, x, y + r, r);
        this.lineTo(x, y + h - r);
        this.arcTo(x, y + h - r, x + r, y + h, r);
        this.lineTo(x + w - r, y + h);
        this.arcTo(x + w - r, y + h, x + w, y + h - r, r);
        this.lineTo(x + w, y + r);
        this.arcTo(x + w, y + r, x + w - r, y, r);
      }
      this.closePath();
    };
  }

}).call(this);
