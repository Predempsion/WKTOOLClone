// Generated by CoffeeScript 1.7.1
(function() {
  var updateModel, _editor, _errWidget, _lastColumn, _lastLine, _lastMessage, _lastName, _refreshParserTimeout;

  if (this.Editor == null) {
    this.Editor = {};
  }

  _editor = null;

  _refreshParserTimeout = null;

  Init(function() {
    _editor = CodeMirror(document.getElementById("editor"), {
      mode: "WCCS",
      lineNumbers: true,
      tabSize: 2,
      lineWrapping: true,
      matchBrackets: true
    });
    _editor.setValue("");
    $('#model-lang > .btn').click(function() {
      return Editor.mode($(this).html());
    });
    return _editor.on('change', function() {
      if (_refreshParserTimeout != null) {
        clearTimeout(_refreshParserTimeout);
      }
      return _refreshParserTimeout = setTimeout(updateModel, 500);
    });
  });

  _errWidget = null;

  _lastLine = null;

  _lastMessage = null;

  _lastColumn = null;

  _lastName = null;

  updateModel = function() {
    var err, has_nonparse_error, has_parse_error, msgbox, widget, wks;
    _refreshParserTimeout = null;
    msgbox = $("#editor-message");
    has_parse_error = false;
    has_nonparse_error = false;
    try {
      wks = window["" + (Editor.mode()) + "Parser"].parse(Editor.model());
      if (wks.declarations != null) {
        Editor.nwccsExport(wks);
      } else if (!(wks instanceof Array)) {
        Verifier.populateStates(wks.getExplicitStateNames());
        wks.resolve();
      }
    } catch (_error) {
      err = _error;
      if ('line' in err && 'name' in err && 'message' in err && 'column' in err) {
        has_parse_error = true;
        if ((_errWidget == null) || _lastLine !== err.line || _lastMessage !== err.message || _lastColumn !== err.column || _lastName !== err.name) {
          if (_errWidget != null) {
            _errWidget.clear();
          }
          _lastLine = err.message;
          _lastMessage = err.message;
          _lastColumn = err.column;
          _lastName = err.name;
          widget = $('<div>').addClass('error-widget alert');
          widget.append($("<button class='close'>&times;</button>").click(function() {
            if (_errWidget != null) {
              _errWidget.clear();
            }
            return _errWidget = null;
          }));
          widget.append($('<strong>').html("" + err.name + ", Line " + err.line + ", Column " + err.column + ": "));
          widget.append($('<span>').html(err.message));
          _errWidget = _editor.addLineWidget(err.line - 1, widget[0]);
          Utils.track('UI', 'editor-test-parse-failed', err.name + ":" + err.message);
        }
      } else {
        has_nonparse_error = true;
        msgbox.find('.message').html(err.message);
      }
    }
    if (!has_parse_error) {
      if (_errWidget != null) {
        _errWidget.clear();
      }
      _errWidget = null;
      _errWidget = null;
      _lastLine = null;
      _lastMessage = null;
      _lastColumn = null;
      _lastName = null;
    }
    if (has_nonparse_error) {
      return msgbox.fadeIn();
    } else {
      return msgbox.fadeOut();
    }
  };

  Editor.height = function(h) {
    return _editor != null ? _editor.setSize("auto", h) : void 0;
  };

  Editor.mode = function(mode) {
    if (mode != null) {
      _editor.setOption('mode', mode);
      $('#model-lang > .btn').removeClass('disabled');
      $('#model-lang > .btn').each(function() {
        if ($(this).html() === mode) {
          return $(this).addClass('disabled');
        }
      });
      return Utils.track('UI', 'switch-editor-mode', mode);
    } else {
      return $('#model-lang > .btn.disabled').html();
    }
  };

  Editor.load = function(json) {
    if (json == null) {
      json = {
        definition: '',
        language: 'WCCS'
      };
    }
    _editor.setValue(json.definition);
    Editor.mode(json.language);
    return updateModel();
  };

  Editor.save = function() {
    return {
      definition: _editor.getValue(),
      language: Editor.mode()
    };
  };

  Editor.model = function(m) {
    if (m != null) {
      _editor.setValue(m);
    }
    return _editor.getValue();
  };

  Editor.nwccsExport = function(wks) {
    var decl, xml, _i, _len, _ref;
    xml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<declarations>\n";
    _ref = wks.declarations;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      decl = _ref[_i];
      xml = xml + "<process>\n";
      xml = xml + "<name>\n";
      xml = xml + ("" + decl.name + "\n");
      xml = xml + "</name>\n";
      xml = xml + "<declaration>\n";
      xml = xml + ("" + (decl.statement.convert_to_xml()));
      xml = xml + "</declaration>\n";
      xml = xml + "</process>\n";
    }
    xml = xml + "</declarations>";
    return console.log(xml);
  };

}).call(this);
